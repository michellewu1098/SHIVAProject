//------------------------------------------------------------------------------------
/// \file Shader.h
/// \brief Shader class
/// \author Michelle Wu
/// \version 1.0
//------------------------------------------------------------------------------------

#ifndef SHADER_H_
#define SHADER_H_

#include <GL/glew.h>
#include <iostream>
#include <fstream>
#include <string>

class Shader
{
public:
    //--------------------------------------------------------------------------------------
    /// \brief Default ctor
    //--------------------------------------------------------------------------------------
    Shader();
    //--------------------------------------------------------------------------------------
    /// \brief Dtor
    //--------------------------------------------------------------------------------------
    ~Shader();
    //--------------------------------------------------------------------------------------
    /// \brief Ctor that initialise the shader
    /// \param [in] _vsFile Vertex shader file
    /// \param [in] _fsFile Fragment shader file
    //--------------------------------------------------------------------------------------
    Shader( std::string _vsFile, std::string _fsFile );
    //--------------------------------------------------------------------------------------
    /// \brief Initialise the shader
    /// \param [in] _vsFile Vertex shader file
    /// \param [in] _fsFile Fragment shader file
    //--------------------------------------------------------------------------------------
    void init( std::string _vsFile, std::string _fsFile );
    //--------------------------------------------------------------------------------------
    /// \brief Check if shader has been initialised
    /// param [out] m_init
    //--------------------------------------------------------------------------------------
    bool isInit() const { return m_init; }
    //--------------------------------------------------------------------------------------
    /// \brief Bind the shader
    //--------------------------------------------------------------------------------------
    void bind() const;
    //--------------------------------------------------------------------------------------
    /// \brief Unbind the shader
    //--------------------------------------------------------------------------------------
    void unbind() const;
    //--------------------------------------------------------------------------------------
    /// \brief Returns the ID of the shader
    /// \param [out] m_id Shader's ID
    //--------------------------------------------------------------------------------------
    GLuint getID() const { return m_id; }
    //--------------------------------------------------------------------------------------
    /// \brief Destroy the shader
    //--------------------------------------------------------------------------------------
    void destroy();
    //--------------------------------------------------------------------------------------
    /// \brief Read text from file
    /// \param [in] _fileName
    //--------------------------------------------------------------------------------------
    static std::string fileRead( const char* _fileName );
    //--------------------------------------------------------------------------------------
    /// \brief Check if shader compilation is successful
    /// \param [in] _shader
    /// \param [in] _file
    //--------------------------------------------------------------------------------------
    static bool validateShader( GLuint _shader, const char* _file );
    //--------------------------------------------------------------------------------------
    /// \brief Check if shader program has been linked successfully
    /// \param [in] _program
    /// \param [in] _vs Vertex shader
    /// \param [in] _fs Fragment shader
    //--------------------------------------------------------------------------------------
    static bool validateProgram( GLuint _program, GLuint _vs, GLuint _fs );
    //--------------------------------------------------------------------------------------
	/// \brief Set vertex and fragment shaders filenames
	/// \param [in] _vsFile 
	/// \param [in] _fsFile
    //--------------------------------------------------------------------------------------
	void setFileNames( std::string _vsFile, std::string _fsFile );
	//--------------------------------------------------------------------------------------
	/// \brief Link shader program (need to do this to support GLSL 1.40)
	//--------------------------------------------------------------------------------------
	void link();
    //--------------------------------------------------------------------------------------
	/// \brief Comparison operator overload
	//--------------------------------------------------------------------------------------
	bool Shader::operator==( const Shader &other ) const {
		return( m_id == other.m_id && m_vs == other.m_vs && m_fs == other.m_fs ); 
	}
	//--------------------------------------------------------------------------------------
	/// \brief Comparison operator overload
	//--------------------------------------------------------------------------------------
	bool Shader::operator!=( const Shader &other ) const {
		return !( *this == other );
	}
	//--------------------------------------------------------------------------------------

private:

    //--------------------------------------------------------------------------------------
    /// \brief Bool to check if shader has been initialised
    //--------------------------------------------------------------------------------------
    bool m_init;
    //--------------------------------------------------------------------------------------
    /// \brief Shader ID
    //--------------------------------------------------------------------------------------
    GLuint m_id;
    //--------------------------------------------------------------------------------------
    /// \brief Vertex shader id
    //--------------------------------------------------------------------------------------
    GLuint m_vs;
    //--------------------------------------------------------------------------------------
    /// \brief Fragment shader id
    //--------------------------------------------------------------------------------------
    GLuint m_fs;
    //--------------------------------------------------------------------------------------
	const char* m_vsFileName;
	//--------------------------------------------------------------------------------------
	const char* m_fsFileName;
	//--------------------------------------------------------------------------------------
	std::string m_vsSourceFile;
	std::string m_fsSourceFile;
	
	
};

#endif // SHADER_H
