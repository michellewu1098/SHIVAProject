///-----------------------------------------------------------------------------------------------
/// \file VolCacheNode.h
/// \brief Leaf node for volume cache
/// \author Leigh McLoughlin
/// \date Jun 3, 2013
/// \version 1.0
///-----------------------------------------------------------------------------------------------

#ifndef VOLCACHE_H_
#define VOLCACHE_H_

#include <iostream>
#include <algorithm>
#include <cmath>

#include "VolumeTree/Node.h"

namespace totemio
{
	class CacheNode;
}

namespace VolumeTree
{
	class VolCacheNode : public Node
	{
	public:

		//----------------------------------------------------------------------------------
		/// \brief Default ctor
		//----------------------------------------------------------------------------------
		VolCacheNode();
		//----------------------------------------------------------------------------------
		/// \brief Ctor passing filename
		/// \param [in] _fileName
		//----------------------------------------------------------------------------------
		VolCacheNode( std::string _fileName );
		//----------------------------------------------------------------------------------
		/// \brief Ctor passing node
		/// \param [in] _nodeIn
		//----------------------------------------------------------------------------------
		VolCacheNode( totemio::CacheNode* _nodeIn );
		//----------------------------------------------------------------------------------
		/// \brief Dtor
		//----------------------------------------------------------------------------------
		virtual ~VolCacheNode();
		//----------------------------------------------------------------------------------
		/// \brief Returns node type
		/// \return "VolCacheNode"
		//----------------------------------------------------------------------------------
		virtual std::string GetNodeType() { return "VolCacheNode"; }
		//----------------------------------------------------------------------------------
		/// \brief Samples the function at a specific point
		/// \param [in] _x
		/// \param [in] _y
		/// \param [in] _z
		//----------------------------------------------------------------------------------
		float GetFunctionValue( float _x, float _y, float _z );
		//----------------------------------------------------------------------------------
		/// \brief Returns a GLSL-compatible string for the function
		/// \param [in] _callCache
		/// \param [in] _samplePosStr
		//----------------------------------------------------------------------------------
		std::string GetFunctionGLSLString( bool _callCache, std::string _samplePosStr );
		//----------------------------------------------------------------------------------
		/// \brief Set to use cache
		/// \param [in] _useCache
		/// \param [in] _cacheID
		/// \param [in] _cacheResX
		/// \param [in] _cacheResY
		/// \param [in] _cacheResZ
		//----------------------------------------------------------------------------------
		virtual void SetUseCache( bool _useCache, unsigned int _cacheID, unsigned int _cacheResX, unsigned int _cacheResY, unsigned int _cacheResZ );
		//----------------------------------------------------------------------------------
		/// \brief Get node cost
		/// \return 2
		//----------------------------------------------------------------------------------
		virtual unsigned int GetNodeCost() { return 2; }
		//----------------------------------------------------------------------------------
		/// \brief Get boundaries
		/// \param [in] _minX
		/// \param [in] _maxX
		/// \param [in] _minY 
		/// \param [in] _maxY
		/// \param [in] _minZ
		/// \param [in] _maxZ
		//----------------------------------------------------------------------------------
		virtual void GetBounds( float *_minX, float *_maxX, float *_minY, float *_maxY, float *_minZ, float *_maxZ );
		//----------------------------------------------------------------------------------

	protected:

		//----------------------------------------------------------------------------------
		/// \brief Filename
		//----------------------------------------------------------------------------------
		std::string m_filename;
		//----------------------------------------------------------------------------------
		/// \brief Volume cache node
		//----------------------------------------------------------------------------------
		totemio::CacheNode *m_volCacheNode;
		//----------------------------------------------------------------------------------
		/// \brief Minimum X boundary
		//----------------------------------------------------------------------------------
		float m_boundsMinX;
		//----------------------------------------------------------------------------------
		/// \brief Maximum X boundary
		//----------------------------------------------------------------------------------
		float m_boundsMaxX;
		//----------------------------------------------------------------------------------
		/// \brief Minimum Y boundary
		//----------------------------------------------------------------------------------
		float m_boundsMinY;
		//----------------------------------------------------------------------------------
		/// \brief Maximum Y boundary
		//----------------------------------------------------------------------------------
		float m_boundsMaxY;
		//----------------------------------------------------------------------------------
		/// \brief Minimum Z boundary
		//----------------------------------------------------------------------------------
		float m_boundsMinZ;
		//----------------------------------------------------------------------------------
		/// \brief Maximum Z boundary
		//----------------------------------------------------------------------------------
		float m_boundsMaxZ;
		//----------------------------------------------------------------------------------
		/// \brief Populate cache data
		/// \param [in] _data
		/// \param [in] _startX
		/// \param [in] _startY
		/// \param [in] _startZ
		/// \param [in] _stepX
		/// \param [in] _stepY
		/// \param [in] _stepZ
		//----------------------------------------------------------------------------------
		virtual void PopulateCacheData( float **_data, float _startX, float _startY, float _startZ, float _stepX, float _stepY, float _stepZ );
		//----------------------------------------------------------------------------------
		/// \brief Cached function
		//----------------------------------------------------------------------------------
		float *m_cachedFunction;
		//----------------------------------------------------------------------------------
		/// \brief Uses nearest sampling 
		/// \param [in] _x
		/// \param [in] _y
		/// \param [in] _z
		//----------------------------------------------------------------------------------
		float SampleCacheFunction( unsigned int _x, unsigned int _y, unsigned int _z );
		//----------------------------------------------------------------------------------

	};
}

#endif
