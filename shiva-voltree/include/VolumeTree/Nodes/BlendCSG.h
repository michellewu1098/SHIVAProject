///-----------------------------------------------------------------------------------------------
/// \file BlendCSG.h
/// \brief Blend CSG node
/// \author Leigh McLoughlin
/// \date Jun 13, 2013
/// \version 1.0
///-----------------------------------------------------------------------------------------------

#ifndef BLENDCSG_H_
#define BLENDCSG_H_

#include "VolumeTree/Nodes/CSG.h"

namespace VolumeTree
{
	class BlendCSGNode : public CSGNode
	{
	public:

		//----------------------------------------------------------------------------------
		/// \brief Default ctor
		//----------------------------------------------------------------------------------
		BlendCSGNode();
		//----------------------------------------------------------------------------------
		/// \brief Ctor passing childA and childB of blend CSG node
		/// \param [in] _childA
		/// \param [in] _childB
		//----------------------------------------------------------------------------------
		BlendCSGNode( Node *_childA, Node *_childB );
		//----------------------------------------------------------------------------------
		/// \brief Dtor
		//----------------------------------------------------------------------------------
		virtual ~BlendCSGNode();
		//----------------------------------------------------------------------------------
		/// \brief Get node type
		/// \return "BlendCSGNode"
		//----------------------------------------------------------------------------------
		virtual std::string GetNodeType() { return "BlendCSGNode"; }
		//----------------------------------------------------------------------------------
		/// \brief Get blending parameters
		/// \param [out] _a0
		/// \param [out] _a1
		/// \param [out] _a2
		//----------------------------------------------------------------------------------
		void GetBlendParams( float &_a0, float &_a1, float &_a2 ) { _a0 = m_a0; _a1 = m_a1; _a2 = m_a2; }
		//----------------------------------------------------------------------------------
		/// \brief Set blending parameters
		/// \param [in] _a0
		/// \param [in] _a1
		/// \param [in] _a2
		//----------------------------------------------------------------------------------
		void SetBlendParams( const float &_a0, const float &_a1, const float &_a2 ) { m_a0 = _a0; m_a1 = _a1; m_a2 = _a2; }
		//----------------------------------------------------------------------------------
		/// \brief Samples the function at a specific point
		/// \param [in] _x X coord
		/// \param [in] _y Y coord
		/// \param [in] _z Z coord
		//----------------------------------------------------------------------------------
		float GetFunctionValue( float _x, float _y, float _z );
		//----------------------------------------------------------------------------------
		/// \brief Returns a GLSL-compatible string for the function
		/// \param [in] callCache
		/// \param [in] samplePosStr 
		//----------------------------------------------------------------------------------
		std::string GetFunctionGLSLString( bool _callCache, std::string _samplePosStr );
		//----------------------------------------------------------------------------------
		/// \brief Get node cost
		/// \return 4
		//----------------------------------------------------------------------------------
		virtual unsigned int GetNodeCost() { return 4; }
		//----------------------------------------------------------------------------------
		/// \brief Get boundaries
		/// \param [out] _minX
		/// \param [out] _maxX
		/// \param [out] _minY
		/// \param [out] _maxY
		/// \param [out] _minZ
		/// \param [out] _maxZ
		//----------------------------------------------------------------------------------
		virtual void GetBounds( float *_minX, float *_maxX, float *_minY, float *_maxY, float *_minZ, float *_maxZ );
		//----------------------------------------------------------------------------------

	protected:

		//----------------------------------------------------------------------------------
		/// \brief First blending param
		//----------------------------------------------------------------------------------
		float m_a0;
		//----------------------------------------------------------------------------------
		/// \brief Second blending param
		//----------------------------------------------------------------------------------
		float m_a1;
		//----------------------------------------------------------------------------------
		/// \brief Third blending param
		//----------------------------------------------------------------------------------
		float m_a2;
		//----------------------------------------------------------------------------------
	};

}


#endif /* BLENDCSG_H_ */
