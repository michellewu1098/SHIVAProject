///-----------------------------------------------------------------------------------------------
/// \file Command.h
/// \brief Command class represents an object that encapsulates a request/action
/// \author Michelle Wu
/// \date May 15, 2017
/// \version 1.0
///-----------------------------------------------------------------------------------------------

#ifndef COMMAND_H_
#define COMMAND_H_

#include "Totem/TotemController.h"

class Command
{
public:

	//----------------------------------------------------------------------------------
	enum State
	{
		READY,
		DONE,
		UNDONE,
		STUCK
	};
	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	Command();
	//----------------------------------------------------------------------------------
	/// \brief Dtor
	//----------------------------------------------------------------------------------
	virtual ~Command();
	//----------------------------------------------------------------------------------
	/// \brief Execute method
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller ) = 0;
	//----------------------------------------------------------------------------------
	/// \brief Undo method
	//----------------------------------------------------------------------------------
	virtual void Undo() = 0;
	//----------------------------------------------------------------------------------
	/// \brief Redo method
	//----------------------------------------------------------------------------------
	virtual void Redo() = 0;
	//----------------------------------------------------------------------------------
	/// \brief Returns whether m_object has no children nor is/has a parent so can be deleted from redo stack
	//----------------------------------------------------------------------------------
	bool IsObjectDetached();
	//----------------------------------------------------------------------------------

protected:

	//----------------------------------------------------------------------------------
	/// \brief Command state
	//----------------------------------------------------------------------------------
	State m_state;
	//----------------------------------------------------------------------------------
	/// \brief Reference to totem controller
	//----------------------------------------------------------------------------------
	Totem::Controller* m_totemController;
	//----------------------------------------------------------------------------------
	/// \brief Reference to object on which command is acting on
	//----------------------------------------------------------------------------------
	Totem::Object* m_object;
	//----------------------------------------------------------------------------------

};

class AddObjectCommand : public Command 
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	AddObjectCommand();
	//----------------------------------------------------------------------------------
	/// \brief Dtor
	//----------------------------------------------------------------------------------
	~AddObjectCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the add primitive command 
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the add primitive command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the add primitive command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set primitive id and number of gui controllers
	/// \param [in] _primID
	/// \param [in] _nGUIControllers
	//----------------------------------------------------------------------------------
	void SetParameters( const unsigned int &_primID, const unsigned int &_nGUIControllers ) { m_primID = _primID; m_nGUIControllers = _nGUIControllers; } 
	//----------------------------------------------------------------------------------

private:

	//----------------------------------------------------------------------------------
	/// \brief Primitive ID
	//----------------------------------------------------------------------------------
	unsigned int m_primID;
	//----------------------------------------------------------------------------------
	/// \brief Number of gui controllers
	//----------------------------------------------------------------------------------
	unsigned int m_nGUIControllers;
	//----------------------------------------------------------------------------------

};

class SelectCommand : public Command
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	SelectCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the select command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the select command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the select command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set the kind of selection, "below" or "above"
	/// \param [in] _value 
	//----------------------------------------------------------------------------------
	void SetSelection( std::string _value ) { m_selection = _value; }
	//----------------------------------------------------------------------------------

private:

	//----------------------------------------------------------------------------------
	/// \brief Type of selection, above or below
	//----------------------------------------------------------------------------------
	std::string m_selection;
	//----------------------------------------------------------------------------------

};

class SelectMouseCommand : public Command
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	SelectMouseCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the select with mouse command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the select with mouse command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the select with mouse command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set selection vector origin and direction
	/// \param [in] _origX
	/// \param [in] _origY
	/// \param [in] _origZ
	/// \param [in] _dirX
	/// \param [in] _dirY
	/// \param [in] _dirZ
	//----------------------------------------------------------------------------------
	void SetSelectionVec( const float &_origX, const float &_origY, const float &_origZ, const float &_dirX, const float &_dirY, const float &_dirZ );
	//----------------------------------------------------------------------------------
	
private:

	//----------------------------------------------------------------------------------
	/// \brief Select vector origin x-coord
	//----------------------------------------------------------------------------------
	float m_selectVecOrigX;
	//----------------------------------------------------------------------------------
	/// \brief Select vector origin y-coord
	//----------------------------------------------------------------------------------
	float m_selectVecOrigY;
	//----------------------------------------------------------------------------------
	/// \brief Select vector origin z-coord
	//----------------------------------------------------------------------------------
	float m_selectVecOrigZ;
	//----------------------------------------------------------------------------------
	/// \brief Select vector direction x-coord
	//----------------------------------------------------------------------------------
	float m_selectVecDirX;
	//----------------------------------------------------------------------------------
	/// \brief Select vector direction y-coord
	//----------------------------------------------------------------------------------
	float m_selectVecDirY;
	//----------------------------------------------------------------------------------
	/// \brief Select vector direction z-coord
	//----------------------------------------------------------------------------------
	float m_selectVecDirZ;
	//----------------------------------------------------------------------------------
	/// \brief Previously selected object
	//----------------------------------------------------------------------------------
	Totem::Object* m_prevSelected;
	//----------------------------------------------------------------------------------

};

class SwapCommand : public Command
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	SwapCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the swap command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the swap command 
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the swap command 
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set whether we're shifting the object up or down
	/// \param [in] _valu True or false
	//----------------------------------------------------------------------------------
	void SetShiftOrder( const bool &_value ) { m_moveUp = _value; }
	//----------------------------------------------------------------------------------

private:

	//----------------------------------------------------------------------------------
	/// \brief Whether we're shifting up or down the object
	//----------------------------------------------------------------------------------
	bool m_moveUp;
	//----------------------------------------------------------------------------------

};


class ResetNudgeCommand : public Command 
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	ResetNudgeCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the reset command 
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the reset command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the reset command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------

private:

	//----------------------------------------------------------------------------------
	/// \brief Offset along x-axis
	//----------------------------------------------------------------------------------
	float m_offsetX;
	//----------------------------------------------------------------------------------
	/// \brief Offset along y-axis
	//----------------------------------------------------------------------------------	
	float m_offsetY;
	//----------------------------------------------------------------------------------
	/// \brief Offset along z-axis
	//----------------------------------------------------------------------------------	
	float m_offsetZ;
	//----------------------------------------------------------------------------------

};

class NudgeCommand : public Command
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	NudgeCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the nudge command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the nudge command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the nudge command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set offsets for nudge activity
	/// \param [in] _x
	/// \param [in] _y
	/// \param [in] _z
	//----------------------------------------------------------------------------------
	void SetOffsets( const float &_x, const float &_y, const float &_z ) { m_x = _x; m_y = _y; m_z = _z; }
	//----------------------------------------------------------------------------------
	
private:

	//----------------------------------------------------------------------------------
	/// \brief Offset along x-axis
	//----------------------------------------------------------------------------------
	float m_x;
	//----------------------------------------------------------------------------------
	/// \brief Offset along y-axis
	//----------------------------------------------------------------------------------
	float m_y;
	//----------------------------------------------------------------------------------
	/// \brief Offset along z-axis
	//----------------------------------------------------------------------------------
	float m_z;
	//----------------------------------------------------------------------------------

};

class ResetScaleCommand : public Command
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	ResetScaleCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the reset scale command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the reset scale command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the reset scale command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------

private:

	//----------------------------------------------------------------------------------
	/// \brief Scaling along x-axis
	//----------------------------------------------------------------------------------
	float m_scaleX;
	//----------------------------------------------------------------------------------
	/// \brief Scaling along y-axis
	//----------------------------------------------------------------------------------
	float m_scaleY;
	//----------------------------------------------------------------------------------
	/// \brief Scaling along z-axis
	//----------------------------------------------------------------------------------
	float m_scaleZ;
	//----------------------------------------------------------------------------------

};


class ScaleCommand : public Command
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	ScaleCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the scale command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the scale command 
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the scale command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set whether scaling is up or down
	/// \param [in] _value Up or down
	//----------------------------------------------------------------------------------
	void SetScaling( std::string _value ) { m_scaling = _value; }
	//----------------------------------------------------------------------------------
	/// Set scale step size in x, y and z directions
	/// \param [in] _scaleX
	/// \param [in] _scaleY
	/// \param [in] _scaleZ
	//----------------------------------------------------------------------------------
	void SetScaleStepSize( const float &_scaleX, const float &_scaleY, const float &_scaleZ );
	//----------------------------------------------------------------------------------

private:
	
	//----------------------------------------------------------------------------------
	/// \brief Specifies whether we're scaling up or down
	//----------------------------------------------------------------------------------
	std::string m_scaling;
	//----------------------------------------------------------------------------------
	/// \brief Scaling along x-axis
	//----------------------------------------------------------------------------------
	float m_scaleX;
	//----------------------------------------------------------------------------------
	/// \brief Scaling along y-axis
	//----------------------------------------------------------------------------------
	float m_scaleY;
	//----------------------------------------------------------------------------------
	/// \brief Scaling along z-axis
	//----------------------------------------------------------------------------------
	float m_scaleZ;
	//----------------------------------------------------------------------------------

};

class RotateCommand : public Command 
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	RotateCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the rotate command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the rotate command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the rotate command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set amount of rotation along x-, y- and z-axis
	/// \param [in] _rotX
	/// \param [in] _rotY
	/// \param [in] _rotZ
	//----------------------------------------------------------------------------------
	void SetRotation( const float &_rotX, const float &_rotY, const float &_rotZ ) { m_rotX = _rotX; m_rotY = _rotY; m_rotZ = _rotZ; }
	//----------------------------------------------------------------------------------

private:

	//----------------------------------------------------------------------------------
	/// \brief Rotation along x-axis
	//----------------------------------------------------------------------------------
	float m_rotX;
	//----------------------------------------------------------------------------------
	/// \brief Rotation along y-axis
	//----------------------------------------------------------------------------------
	float m_rotY;
	//----------------------------------------------------------------------------------
	/// \brief Rotation along z-axis
	//----------------------------------------------------------------------------------
	float m_rotZ;
	//----------------------------------------------------------------------------------

};

class DrillCommand : public Command
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	DrillCommand();
	//----------------------------------------------------------------------------------
	/// \brief Dtor
	//----------------------------------------------------------------------------------
	~DrillCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the drill command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the drill command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the drill command 
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set the drill operation for this command
	/// \param [in] _op Drill operation
	//----------------------------------------------------------------------------------
	void SetOperation( Totem::Operations::Drill* _op ) { m_op = _op; }
	//----------------------------------------------------------------------------------

private:

	//----------------------------------------------------------------------------------
	/// \brief Reference to drill operation
	//----------------------------------------------------------------------------------
	Totem::Operations::Drill* m_op;
	//----------------------------------------------------------------------------------

};

class ResetBlendCommand : public Command
{
public: 

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	ResetBlendCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the reset blend command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the reset blend command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the reset blend command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set blend amount
	/// \param [in] _blendAmount
	//----------------------------------------------------------------------------------
	void SetBlendAmount( const float &_blendAmount ) { m_blendAmount = _blendAmount; }
	//----------------------------------------------------------------------------------

private:

	//----------------------------------------------------------------------------------
	/// \brief Blend amount
	//----------------------------------------------------------------------------------
	float m_blendAmount;
	//----------------------------------------------------------------------------------

};

class BlendCommand : public Command 
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	BlendCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the blend (pump) command
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the blend command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the blend command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
	/// \brief Set whether blending is increasing or decreasing
	/// \param [in] _blend
	//----------------------------------------------------------------------------------
	void SetBlend( std::string _blend ) { m_blend = _blend; }
	//----------------------------------------------------------------------------------

private:
	
	//----------------------------------------------------------------------------------
	/// \brief Specifies if blending is increasing or decreasing
	//----------------------------------------------------------------------------------
	std::string m_blend;
	//----------------------------------------------------------------------------------

};

class DeleteObjectCommand : public Command
{
public:
	
	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	DeleteObjectCommand();	
	//----------------------------------------------------------------------------------
	/// \brief Dtor 
	//----------------------------------------------------------------------------------
	//~DeleteObjectCommand();
	//----------------------------------------------------------------------------------
	/// \brief Execute the delete object command 
	/// \param [in] _controller Reference to totem controller in use
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the delete object command
	//----------------------------------------------------------------------------------
	virtual void Undo();	
	//----------------------------------------------------------------------------------
	/// \brief Redo the delete object command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------

private:
	
	//----------------------------------------------------------------------------------
	/// \brief Pointer to victim of deletion
	//----------------------------------------------------------------------------------
	Totem::Object* m_victim;
	//----------------------------------------------------------------------------------
	
};

class NewCommand : public Command
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Execute the new command
	/// \param [in] _controller
	//----------------------------------------------------------------------------------
	virtual void Execute( Totem::Controller* _controller );
	//----------------------------------------------------------------------------------
	/// \brief Undo the new command
	//----------------------------------------------------------------------------------
	virtual void Undo();
	//----------------------------------------------------------------------------------
	/// \brief Redo the new command
	//----------------------------------------------------------------------------------
	virtual void Redo();
	//----------------------------------------------------------------------------------
};

#endif