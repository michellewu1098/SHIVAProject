
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
#ifndef __SHIVA_UTILITY_GPUPROGRAM__
#define __SHIVA_UTILITY_GPUPROGRAM__
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
#include <string>

//////////////////////////////////////////////////////////////////////////
#include "GPUShader.h"

//////////////////////////////////////////////////////////////////////////

namespace Utility
{

	class GPUProgram
	{
	public:
		enum ProgramType
		{
			VERTEX,
			VERTEX_AND_FRAGMENT,
			FRAGMENT
		};

		GPUProgram();
		~GPUProgram();

		bool Create(const std::string programFileName, ProgramType type = FRAGMENT);
		void On();
		void Off();

		GPUShader* GetFragmentShader() {return _fragmentShader;}
		GPUShader* GetVertexShader() {return _vertexShader;}
		unsigned int GetProgramID() {return _program;}

	protected:
		unsigned int _program;
		GPUShader *_vertexShader;
		GPUShader *_fragmentShader;
	};

}

//////////////////////////////////////////////////////////////////////////
#endif
