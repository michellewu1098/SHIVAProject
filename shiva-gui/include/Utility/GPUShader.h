///-----------------------------------------------------------------------------------------------
/// \file GPUShader.h
/// \brief Class for shader 
/// \author Leigh McLoughlin
/// \version 1.0
///-----------------------------------------------------------------------------------------------

#ifndef __SHIVA_UTILITY_GPUSHADER__
#define __SHIVA_UTILITY_GPUSHADER__

#include <string>
#include <GL/glew.h>
#include <GL/glu.h>

namespace Utility
{
	class GPUShader
	{
	public:

		//----------------------------------------------------------------------------------
		/// \brief Shader type
		//----------------------------------------------------------------------------------
		enum ShaderType
		{
			VERTEX,
			FRAGMENT
		};
		//----------------------------------------------------------------------------------
		/// \brief Ctor
		/// \param [in] _type Shader type (frag or vert)
		//----------------------------------------------------------------------------------
		GPUShader( ShaderType _type );
		//----------------------------------------------------------------------------------
		/// \brief Dtor
		//----------------------------------------------------------------------------------
		~GPUShader();
		//----------------------------------------------------------------------------------
		/// \brief Create shader based on type and load source file to shader
		/// \param [in] _source
		//----------------------------------------------------------------------------------
		bool Load( std::string _source );
		//----------------------------------------------------------------------------------
		/// \brief Load shader from source file
		/// \param [in] _fileName Shader file name
		//----------------------------------------------------------------------------------
		bool LoadFromFile( std::string _fileName );
		//----------------------------------------------------------------------------------
		/// \brief Compile and attach shaders to shader program
		/// \param [in] _programID Shader program ID
		//----------------------------------------------------------------------------------
		bool CompileShader( GLuint _programID );
		//----------------------------------------------------------------------------------
		/// \brief Get shader handle
		/// \return m_handle
		//----------------------------------------------------------------------------------
		GLuint GetShaderHandle() const { return m_handle; }
		//----------------------------------------------------------------------------------
		/// \brief Detach shader from shader program
		/// \param [in] _programID Shader program ID
		//----------------------------------------------------------------------------------
		void DetachShader( GLuint _programID );
		//----------------------------------------------------------------------------------

	protected:

		//----------------------------------------------------------------------------------
		/// \brief Shader source file
		//----------------------------------------------------------------------------------
		std::string m_source;
		//----------------------------------------------------------------------------------
		/// \brief Shader handle
		//----------------------------------------------------------------------------------
		GLuint m_handle;
		//----------------------------------------------------------------------------------
		/// \brief Shader type: fragment or vertex shader
		//----------------------------------------------------------------------------------
		ShaderType m_type;
		//----------------------------------------------------------------------------------

	};
}

#endif