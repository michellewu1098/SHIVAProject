///-----------------------------------------------------------------------------------------------
/// \file NinePatch.h
/// \brief A NinePatch is a bitmap scaled in a specific way when it is resized (used with GUI buttons). As in Android, it is a stretchable bitmap image
/// \author Leigh McLoughlin
/// \version 1.0
///-----------------------------------------------------------------------------------------------

#ifndef __SHIVA_RESOURCESYSTEM_NINEPATCH__
#define __SHIVA_RESOURCESYSTEM_NINEPATCH__

#include "GUI/Drawables/Drawable.h"
#include "Utility/GPUProgram.h"

namespace ShivaGUI
{
	class NinePatch : public Drawable
	{
	public:

		//----------------------------------------------------------------------------------
		/// \brief Ctor
		//----------------------------------------------------------------------------------
		NinePatch();
		//----------------------------------------------------------------------------------
		/// \brief Dtor
		//----------------------------------------------------------------------------------
		virtual ~NinePatch();
		//----------------------------------------------------------------------------------
		/// \brief Set texture ID
		/// \param [in] _value
		//----------------------------------------------------------------------------------
		void SetTexID( unsigned int _value );
		//----------------------------------------------------------------------------------
		/// \brief For setting up the Drawable from xml
		/// \param [in] _xmlElement
		/// \param [in] _resources
		//----------------------------------------------------------------------------------
		virtual void Inflate( TiXmlElement* _xmlElement, ResourceManager* _resources );
		//----------------------------------------------------------------------------------
		/// \brief Draw method
		//----------------------------------------------------------------------------------
		virtual void Draw();
		//----------------------------------------------------------------------------------
		/// \brief Get content bounds
		/// \param [in] _left
		/// \param [in] _top
		/// \param [in] _right
		/// \param [in] _bottom
		//----------------------------------------------------------------------------------
		virtual void GetContentBounds( float &_left, float &_top, float &_right, float &_bottom );
		//----------------------------------------------------------------------------------
		// For retrieving the actual pixel size of Drawable
		/// \brief Get width
		/// \return m_texWidth
		//----------------------------------------------------------------------------------
		virtual int GetNativeWidth() { return m_texWidth; }
		//----------------------------------------------------------------------------------
		/// \brief Get height
		/// \return m_texHeight
		//----------------------------------------------------------------------------------
		virtual int GetNativeHeight() { return m_texHeight; }
		//----------------------------------------------------------------------------------
		/// \brief Get width from content
		/// \param [in] _contentWidth
		//----------------------------------------------------------------------------------
		virtual int GetNativeWidthFromContent( int _contentWidth );
		//----------------------------------------------------------------------------------
		/// \brief Get height from content
		/// \param [in] _contentHeight
		//----------------------------------------------------------------------------------
		virtual int GetNativeHeightFromContent( int _contentHeight );
		//----------------------------------------------------------------------------------
		/// \brief Create vbos and bind to vao
		//----------------------------------------------------------------------------------
		void BuildVBOs();
		//----------------------------------------------------------------------------------

	protected:

		//----------------------------------------------------------------------------------
		/// \brief Set bounds
		/// \param [in] _left
		/// \param [in] _top
		/// \param [in] _right
		/// \param [in] _bottom
		/// \param [in] _gravity
		//----------------------------------------------------------------------------------
		virtual void OnSetBounds( float _left, float _top, float _right, float _bottom, unsigned int _gravity );
		//----------------------------------------------------------------------------------
		/// \brief Centre left size in proportions of image size
		//----------------------------------------------------------------------------------
		float m_centreLeftProp;
		//----------------------------------------------------------------------------------
		/// \brief Centre right size in proportions of image size
		//----------------------------------------------------------------------------------
		float m_centreRightProp;
		//----------------------------------------------------------------------------------
		/// \brief Centre top size in proportions of image size
		//----------------------------------------------------------------------------------
		float m_centreTopProp;
		//----------------------------------------------------------------------------------
		/// \brief Centre bottom size in proportions of image size
		//----------------------------------------------------------------------------------
		float m_centreBottomProp;
		//----------------------------------------------------------------------------------
		/// \brief Centre left boundaries
		//----------------------------------------------------------------------------------
		float m_centreLeftBounds;
		//----------------------------------------------------------------------------------
		/// \brief Centre right boundaries
		//----------------------------------------------------------------------------------
		float m_centreRightBounds;
		//----------------------------------------------------------------------------------
		/// \brief Centre top boundaries
		//----------------------------------------------------------------------------------
		float m_centreTopBounds;
		//----------------------------------------------------------------------------------
		/// \brief Centre bottom boundaries
		//----------------------------------------------------------------------------------
		float m_centreBottomBounds;
		//----------------------------------------------------------------------------------
		// Content size in proportions of image size
		//----------------------------------------------------------------------------------
		/// \brief Content left size in proportions of image size
		//----------------------------------------------------------------------------------
		float m_contentLeftProp;
		//----------------------------------------------------------------------------------
		/// \brief Content right size in proportions of image size
		//----------------------------------------------------------------------------------
		float m_contentRightProp;
		//----------------------------------------------------------------------------------
		/// \brief Content top size in proportions of image size
		//----------------------------------------------------------------------------------
		float m_contentTopProp;
		//----------------------------------------------------------------------------------
		/// \brief Content bottom size in proportions of image size
		//----------------------------------------------------------------------------------
		float m_contentBottomProp;
		//----------------------------------------------------------------------------------
		// Actual content pixel positions
		//----------------------------------------------------------------------------------
		/// \brief Content left boundaries
		//----------------------------------------------------------------------------------
		float m_contentLeftBounds;
		//----------------------------------------------------------------------------------
		/// \brief Content right boundaries
		//----------------------------------------------------------------------------------
		float m_contentRightBounds;
		//----------------------------------------------------------------------------------
		/// \brief Content top boundaries
		//----------------------------------------------------------------------------------
		float m_contentTopBounds;
		//----------------------------------------------------------------------------------
		/// \brief Content bottom boundaries
		//----------------------------------------------------------------------------------
		float m_contentBottomBounds;
		//----------------------------------------------------------------------------------
		/// \brief Texture id
		//----------------------------------------------------------------------------------
		unsigned int m_texID;
		//----------------------------------------------------------------------------------
		/// \brief Texture width
		//----------------------------------------------------------------------------------
		int m_texWidth; 
		//----------------------------------------------------------------------------------
		/// \brief Texture height
		//----------------------------------------------------------------------------------
		int m_texHeight;
		//----------------------------------------------------------------------------------
		/// \brief Used to check if x is fixed
		//----------------------------------------------------------------------------------
		bool m_fixedX;
		//----------------------------------------------------------------------------------
		/// \brief Used to check if y is fixed
		//----------------------------------------------------------------------------------
		bool m_fixedY;
		//----------------------------------------------------------------------------------
		/// \brief VAO
		//----------------------------------------------------------------------------------
		GLuint m_vao;
		//----------------------------------------------------------------------------------
		/// \brief Shader program
		//----------------------------------------------------------------------------------
		Utility::GPUProgram* m_shader;
		//----------------------------------------------------------------------------------

	};
}

#endif
