#ifndef __SHIVA_RESOURCESYSTEM_IMAGEDRAWABLE__
#define __SHIVA_RESOURCESYSTEM_IMAGEDRAWABLE__

#include <string>
#include "Drawable.h"
//#include "Utility/GPUProgram.h"

namespace ShivaGUI
{
	class BitmapDrawable : public Drawable
	{
	public:

		//----------------------------------------------------------------------------------
		/// \brief Default ctor
		//----------------------------------------------------------------------------------
		BitmapDrawable();
		//----------------------------------------------------------------------------------
		BitmapDrawable( unsigned int OpenGLTexID );
		//----------------------------------------------------------------------------------
		/// \brief Dtor
		//----------------------------------------------------------------------------------
		virtual ~BitmapDrawable();
		//----------------------------------------------------------------------------------
		/// \brief Set texture ID
		/// \param [in] value
		//----------------------------------------------------------------------------------
		void SetTexID( unsigned int value );
		//----------------------------------------------------------------------------------
		/// \brief For setting up the Drawable from xml
		//----------------------------------------------------------------------------------
		virtual void Inflate( TiXmlElement*, ResourceManager* );
		//----------------------------------------------------------------------------------
		/// \brief Draw method
		//----------------------------------------------------------------------------------
		virtual void Draw();
		//----------------------------------------------------------------------------------
		/// \brief Get native width
		/// \return _texWidth
		//----------------------------------------------------------------------------------
		virtual int GetNativeWidth() { return _texWidth; }
		//----------------------------------------------------------------------------------
		/// \brief Get native height
		/// \return _texHeight
		//----------------------------------------------------------------------------------
		virtual int GetNativeHeight() { return _texHeight; }
		//----------------------------------------------------------------------------------
		/// \brief If set, the image will be scaled to fill the bounds
		/// Otherwise, it will display the image at its actual size
		/// The default value is false
		/// \param [in] value
		//----------------------------------------------------------------------------------
		void SetScaleup( bool value ) { _scaleUp = value; }
		//----------------------------------------------------------------------------------
		/// \brief If set, the image will keep the aspect ratio
		//----------------------------------------------------------------------------------
		void SetScaleKeepAspectRatio( bool value ) { _keepAspectRatio = value; }
		//----------------------------------------------------------------------------------

	protected:
		
		//----------------------------------------------------------------------------------
		/// \brief Texture ID
		//----------------------------------------------------------------------------------
		unsigned int _texID;
		//----------------------------------------------------------------------------------
		/// \brief Texture width
		//----------------------------------------------------------------------------------
		int _texWidth;
		//----------------------------------------------------------------------------------
		/// \brief Texture height
		//----------------------------------------------------------------------------------
		int _texHeight;
		//----------------------------------------------------------------------------------
		/// \brief If scaleUp is set to true and the bounds are smaller than the image size, it will scale it up
		/// otherwise, it will display the image at its actual size
		//----------------------------------------------------------------------------------
		bool _scaleUp;
		//----------------------------------------------------------------------------------
		/// \brief Only used if _scaleUp is true
		//----------------------------------------------------------------------------------
		bool _keepAspectRatio;
		//----------------------------------------------------------------------------------
		virtual void OnSetBounds( float left, float top, float right, float bottom, unsigned int gravity );
		//----------------------------------------------------------------------------------
		//Utility::GPUProgram *_testProgram;

	};
}

#endif
