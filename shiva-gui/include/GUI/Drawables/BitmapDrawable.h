///-----------------------------------------------------------------------------------------------
/// \file BitmapDrawable.h
/// \brief Class for bitmap drawable object
/// \author Leigh McLoughlin, Michelle Wu
/// \version 1.0
///-----------------------------------------------------------------------------------------------

#ifndef __SHIVA_RESOURCESYSTEM_IMAGEDRAWABLE__
#define __SHIVA_RESOURCESYSTEM_IMAGEDRAWABLE__

#include "Drawable.h"
#include "Utility/GPUProgram.h"

namespace ShivaGUI
{
	class BitmapDrawable : public Drawable
	{
	public:

		//----------------------------------------------------------------------------------
		/// \brief Default ctor
		//----------------------------------------------------------------------------------
		BitmapDrawable();
		//----------------------------------------------------------------------------------
		/// \brief Ctor passing texture id
		/// \param [in] _OpenGLTexID
		//----------------------------------------------------------------------------------
		BitmapDrawable( unsigned int _OpenGLTexID );
		//----------------------------------------------------------------------------------
		/// \brief Dtor
		//----------------------------------------------------------------------------------
		virtual ~BitmapDrawable();
		//----------------------------------------------------------------------------------
		/// \brief Set texture ID
		/// \param [in] _value
		//----------------------------------------------------------------------------------
		void SetTexID( unsigned int _value );
		//----------------------------------------------------------------------------------
		/// \brief For setting up the Drawable from xml
		//----------------------------------------------------------------------------------
		virtual void Inflate( TiXmlElement*, ResourceManager* );
		//----------------------------------------------------------------------------------
		/// \brief Draw method
		//----------------------------------------------------------------------------------
		virtual void Draw();
		//----------------------------------------------------------------------------------
		/// \brief Get native width
		/// \return m_texWidth
		//----------------------------------------------------------------------------------
		virtual int GetNativeWidth() { return m_texWidth; }
		//----------------------------------------------------------------------------------
		/// \brief Get native height
		/// \return m_texHeight
		//----------------------------------------------------------------------------------
		virtual int GetNativeHeight() { return m_texHeight; }
		//----------------------------------------------------------------------------------
		/// \brief If set, the image will be scaled to fill the bounds
		/// Otherwise, it will display the image at its actual size
		/// The default value is false
		/// \param [in] _value
		//----------------------------------------------------------------------------------
		void SetScaleup( bool _value ) { m_scaleUp = _value; }
		//----------------------------------------------------------------------------------
		/// \brief If set, the image will keep the aspect ratio
		/// \param [in] _value
		//----------------------------------------------------------------------------------
		void SetScaleKeepAspectRatio( bool _value ) { m_keepAspectRatio = _value; }
		//----------------------------------------------------------------------------------

	protected:
		
		//----------------------------------------------------------------------------------
		/// \brief Texture ID
		//----------------------------------------------------------------------------------
		GLuint m_texID;
		//----------------------------------------------------------------------------------
		/// \brief Texture width
		//----------------------------------------------------------------------------------
		GLint m_texWidth;
		//----------------------------------------------------------------------------------
		/// \brief Texture height
		//----------------------------------------------------------------------------------
		GLint m_texHeight;
		//----------------------------------------------------------------------------------
		/// \brief If scaleUp is set to true and the bounds are smaller than the image size, it will scale it up
		/// otherwise, it will display the image at its actual size
		//----------------------------------------------------------------------------------
		bool m_scaleUp;
		//----------------------------------------------------------------------------------
		/// \brief Only used if _scaleUp is true
		//----------------------------------------------------------------------------------
		bool m_keepAspectRatio;
		//----------------------------------------------------------------------------------
		/// \brief Set bounds
		/// \param [in] _left 
		/// \param [in] _top
		/// \param [in] _right
		/// \param [in] _bottom
		/// \param [in] _gravity
		//----------------------------------------------------------------------------------
		virtual void OnSetBounds( float _left, float _top, float _right, float _bottom, unsigned int _gravity );
		//----------------------------------------------------------------------------------
		/// \brief Shader
		//----------------------------------------------------------------------------------
		Utility::GPUProgram *m_shader;
		//----------------------------------------------------------------------------------
		/// \brief Creato vbos and vao for object
		//----------------------------------------------------------------------------------
		void BuildVBOs();
		//----------------------------------------------------------------------------------
		/// \brief VAO
		//----------------------------------------------------------------------------------
		unsigned int m_vao;
		//----------------------------------------------------------------------------------

	};
}

#endif
