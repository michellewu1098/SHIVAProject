#ifndef SDF_CORE_STATIC_STACK_INCLUDED
#define SDF_CORE_STATIC_STACK_INCLUDED

#include <assert.h>

namespace sdf
{
	//----------------------------------------------------------------------------------------------------------------------
	/// @class aabb "include/sdf/core/static_stack.hpp"
	/// @brief Static stack: it is a replacement for the std::stack with stack memory
	///			The stack as debug checks but the release version doesnt
	/// @author Mathieu Sanchez
	/// @version 1.0
	/// @date Last Revision 28/06/11 Initial revision
	//----------------------------------------------------------------------------------------------------------------------
	template<typename T, unsigned int MaxSize>
	class static_stack
	{
	public :
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Constructor - empty stack
		//----------------------------------------------------------------------------------------------------------------------
		static_stack();

		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Test if the stack is empty
		/// @return True if it is empty, false otherwise
		//----------------------------------------------------------------------------------------------------------------------
		bool empty() const;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Number of elements in the stack
		/// @return Number of elements in the stack
		//----------------------------------------------------------------------------------------------------------------------
		unsigned int size() const;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Maximum capacity of the stack (if the size of the stack exceeds the capacity, the world ends)
		/// @return Capacity
		//----------------------------------------------------------------------------------------------------------------------
		unsigned int capacity() const;

		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Push something on the top of the stack
		/// @param[in] i_elem Add an element to the stack (on the top)
		//----------------------------------------------------------------------------------------------------------------------
		void push(const T& i_elem);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Push 2 elements on the top of the stack
		/// @param[in] i_elem1 Add this element to the stack (on the top)
		/// @param[in] i_elem2 And then this element
		//----------------------------------------------------------------------------------------------------------------------
		void push(const T& i_elem1, const T& i_elem2);
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Pop the top of the stack... if you dont retrieve the data beforehand, you lost it !
		//----------------------------------------------------------------------------------------------------------------------
		void pop();

		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Top of the stack
		/// @return Constant reference to the top of the stack
		//----------------------------------------------------------------------------------------------------------------------
		const T& top() const;
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Top of the stack
		/// @return Reference to the top of the stack
		//----------------------------------------------------------------------------------------------------------------------
		T& top();
	private :
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief The array of values 
		//----------------------------------------------------------------------------------------------------------------------
		T m_array[MaxSize];
		//----------------------------------------------------------------------------------------------------------------------
		/// @brief Current index in the array
		//----------------------------------------------------------------------------------------------------------------------
		unsigned int m_index;
	};
}

#include <sdf/core/static_stack.inl>

#endif /* SDF_CORE_STATIC_STACK_INCLUDED */