///-----------------------------------------------------------------------------------------------
/// \file SDFView.h
/// \brief This is for displaying 3D objects
/// \author Leigh McLoughlin
/// \version 1.0
///-----------------------------------------------------------------------------------------------

#ifndef __SHIVA_GUISYSTEM_SDFVIEW__
#define __SHIVA_GUISYSTEM_SDFVIEW__

#include <GL/glew.h>
#include <GL/glu.h>
#include <cml/cml.h>
#include <boost/thread/thread.hpp>
#include <cmath>
#include <iostream>
#include <fstream>

#include "GUI/Views/View.h"
#include "Utility/GPUProgram.h"
#include "Utility/GPUVariable.h"
#include "GUI/Drawables/Drawable.h"
#include "VolumeLoader.h"
#include "VolumeRenderer/Camera.h"


class SDFView : public ShivaGUI::View
{
public:

	//----------------------------------------------------------------------------------
	/// \brief Returns a SDFView
	//----------------------------------------------------------------------------------
	static ShivaGUI::View* Factory() { return new SDFView(); }
	//----------------------------------------------------------------------------------
	/// \brief Ctor
	//----------------------------------------------------------------------------------
	SDFView();
	//----------------------------------------------------------------------------------
	/// \brief Dtor
	//----------------------------------------------------------------------------------
	virtual ~SDFView();
	//----------------------------------------------------------------------------------
	/// \brief Gives the size of the View
	/// If this View has children, it is expected to work out the size and location of these and call Layout() on them too
	//----------------------------------------------------------------------------------
	virtual void Layout( int _left, int _top, int _right, int _bottom, int _windowWidth, int _windowHeight );
	//----------------------------------------------------------------------------------
	/// \brief For setting the View's attributes from xml
	/// \param [in] _xmlElement
	/// \param [in] _resources
	/// \param [in] _themePrefix
	/// \param [in] _rootNode
	//----------------------------------------------------------------------------------
	virtual void Inflate( TiXmlElement*, ShivaGUI::ResourceManager*, std::string _themePrefix = "", bool _rootNode = false );
	//----------------------------------------------------------------------------------
	/// \brief Update method
	/// \param [in] _deltaTs Timestep
	/// \param [in] _guiController
	//----------------------------------------------------------------------------------
	virtual void Update( float _deltaTs, ShivaGUI::GUIController *_guiController );
	//----------------------------------------------------------------------------------
	/// \brief Draw method
	//----------------------------------------------------------------------------------
	virtual void Draw();
	//----------------------------------------------------------------------------------
	/// \brief Themes allow settings to be set for all Views of a given type
	/// The string returned from this function is the string that identifies the type in the theme xml file
	/// It is literally prefixed to normal inflation attributes
	//----------------------------------------------------------------------------------
	virtual std::string GetThemePrefix() { return "SDFView_"; }
	//----------------------------------------------------------------------------------
	// This View does not accept focus
	//----------------------------------------------------------------------------------
	/// \brief Input event given to View, expected to filter down hierarchy
	/// \return false if event is not absorbed (e.g. did not hit button etc)
	//----------------------------------------------------------------------------------
	virtual bool HandleEvent( ShivaGUI::InternalEvent* );
	//----------------------------------------------------------------------------------
	/// \brief Set blend parameter
	/// \param [in] _value
	//----------------------------------------------------------------------------------
	void SetBlendParam( const float &_value ) { m_blendValue = _value; }
	//----------------------------------------------------------------------------------
	/// \brief Set rotation speed
	/// \param [in] _value
	//----------------------------------------------------------------------------------
	void SetRotationSpeed( const float &_value ) { m_rotationSpeed = _value; }
	//----------------------------------------------------------------------------------
	/// \brief Add world rotation offset in degrees
	/// \param [in] _rotX
	/// \param [in] _rotY
	/// \param [in] _rotZ
	//----------------------------------------------------------------------------------
	void AddWorldRotationOffsetDegs( const float &_rotX, const float &_rotY, const float &_rotZ );
	//----------------------------------------------------------------------------------
	/// \brief Add world rotation offset in radians
	/// \param [in] _rotX
	/// \param [in] _rotY
	/// \param [in] _rotZ
	//----------------------------------------------------------------------------------
	void AddWorldRotationOffsetRads( const float &_rotX, const float &_rotY, const float &_rotZ );
	//----------------------------------------------------------------------------------
	/// \brief Add rotation offset in degrees
	/// \param [in] _rotX
	/// \param [in] _rotY
	/// \param [in] _rotZ
	//----------------------------------------------------------------------------------
	void AddRotationOffsetDegs( const float &_rotX, const float &_rotY, const float &_rotZ );
	//----------------------------------------------------------------------------------
	/// \brief Add rotation offset in radians
	/// \param [in] _rotX
	/// \param [in] _rotY
	/// \param [in] _rotZ
	//----------------------------------------------------------------------------------
	void AddRotationOffsetRads( const float &_rotX, const float &_rotY, const float &_rotZ );
	//----------------------------------------------------------------------------------
	/// \brief Set colour
	/// \param [in] _r Red component
	/// \param [in] _g Green component
	/// \param [in] _b Blue component
	//----------------------------------------------------------------------------------
	void SetColour( const float &_r, const float &_g, const float &_b ) { m_colourR = _r; m_colourG = _g; m_colourB = _b; m_colourSet = 1.0f; }
	//----------------------------------------------------------------------------------
	/// \brief Should load either model A or model B from file and return true if successful,
	/// false if failed (and print out an error report to std::cerr)
	/// \param [in] _filename
	/// \param [in] _objectB
	/// \param [in] _guiController
	//----------------------------------------------------------------------------------
	bool LoadVolumeFromFile( std::string _filename, bool _objectB, ShivaGUI::GUIController *_guiController );
	//----------------------------------------------------------------------------------
	/// \brief Should save complete metamorphosis to file and return true if successful, 
	/// false if failed (and print out an error report to std::cerr)
	/// \param [in] _filename
	//----------------------------------------------------------------------------------
	bool SaveVolumeToFile( std::string _filename );
	//----------------------------------------------------------------------------------
	/// \brief Pause rotation
	/// \param [in] _value
	//----------------------------------------------------------------------------------
	void SetPauseRotation( const bool &_value ) { m_pauseRotation = _value; }
	//----------------------------------------------------------------------------------
	/// \brief Set quality
	/// \param [in] _value 
	//----------------------------------------------------------------------------------
	void SetQuality( const float &_value );
	//----------------------------------------------------------------------------------
	/// \brief Create VBOs
	//----------------------------------------------------------------------------------
	void BuildVBOs();
	//----------------------------------------------------------------------------------
	/// \brief Load matrices - projection and modelview - to shader
	//----------------------------------------------------------------------------------
	void LoadMatricesToShader();
	//----------------------------------------------------------------------------------
	/// \brief Thread return volume from file
	/// \param [in] _data
	/// \param [in] _dataSize
	/// \param [in] _objectB
	//----------------------------------------------------------------------------------
	void ThreadReturnVolumeFromFile( float *_data, unsigned int _dataSize, bool _objectB );
	//----------------------------------------------------------------------------------

protected:

	//----------------------------------------------------------------------------------
	// Bounds for the View's place in the GUI System
	//----------------------------------------------------------------------------------
	int m_boundsLeft;
	//----------------------------------------------------------------------------------
	int m_boundsTop;
	//----------------------------------------------------------------------------------
	int m_boundsRight;
	//----------------------------------------------------------------------------------
	int m_boundsBottom;
	//----------------------------------------------------------------------------------
	int m_windowWidth;
	//----------------------------------------------------------------------------------
	int m_windowHeight;
	//----------------------------------------------------------------------------------
	/// \brief ModelView matrix
	//----------------------------------------------------------------------------------
	cml::matrix44f_c m_modelViewMatrix;
	//----------------------------------------------------------------------------------
	/// \brief Inverse ModelView matrix
	//----------------------------------------------------------------------------------
	cml::matrix44f_c m_invModelViewMatrix;
	//----------------------------------------------------------------------------------
	/// \brief Model matrix
	//----------------------------------------------------------------------------------
	cml::matrix44f_c m_modelMatrix;
	//----------------------------------------------------------------------------------
	cml::vector3f _cameraPosition, _targetPosition;
	//----------------------------------------------------------------------------------
	/// \brief Target
	//----------------------------------------------------------------------------------
	SpringyVec3 m_target;
	//----------------------------------------------------------------------------------
	/// \brief Representation of x-axis
	//----------------------------------------------------------------------------------
	cml::vector4f m_axisX;
	//----------------------------------------------------------------------------------
	/// \brief Representation of y-axis
	//----------------------------------------------------------------------------------
	cml::vector4f m_axisY;
	//----------------------------------------------------------------------------------
	/// \brief Representaiton of z-axis
	//----------------------------------------------------------------------------------
	cml::vector4f m_axisZ;
	//----------------------------------------------------------------------------------
	// Local rotations in radians about the major coordinate axes
	//----------------------------------------------------------------------------------
	/// \brief Local rotation about the x-axis
	//----------------------------------------------------------------------------------
	float m_localRotX;
	//----------------------------------------------------------------------------------
	/// \brief Local rotation about the y-axis
	//----------------------------------------------------------------------------------
	float m_localRotY;
	//----------------------------------------------------------------------------------
	/// \brief Local rotation about the z-axis
	//----------------------------------------------------------------------------------
	float m_localRotZ;
	//----------------------------------------------------------------------------------
	/// \brief World rotation about the x-axis
	//----------------------------------------------------------------------------------
	float m_worldRotX;
	//----------------------------------------------------------------------------------
	/// \brief World rotation about the y-axis
	//----------------------------------------------------------------------------------
	float m_worldRotY;
	//----------------------------------------------------------------------------------
	/// \brief World rotation about the z-axis
	//----------------------------------------------------------------------------------
	float m_worldRotZ;
	//----------------------------------------------------------------------------------
	/// \brief Camera angle (fov)
	//----------------------------------------------------------------------------------
	float m_camAngle;
	//----------------------------------------------------------------------------------
	/// \brief Near plane
	//----------------------------------------------------------------------------------
	float m_camNearPlane;
	//----------------------------------------------------------------------------------
	/// \brief Far plane
	//----------------------------------------------------------------------------------
	float m_camFarPlane;
	//----------------------------------------------------------------------------------
	/// \brief For temporarily pausing the rotation
	//----------------------------------------------------------------------------------
	bool m_pauseRotation;
	//----------------------------------------------------------------------------------
	/// \brief Red component
	//----------------------------------------------------------------------------------
	float m_colourR;
	//----------------------------------------------------------------------------------
	/// \brief Green component
	//----------------------------------------------------------------------------------
	float m_colourG;
	//----------------------------------------------------------------------------------
	/// \brief Blue component
	//----------------------------------------------------------------------------------
	float m_colourB;
	//----------------------------------------------------------------------------------
	/// \brief Alpha? 
	//----------------------------------------------------------------------------------
	float m_colourSet;
	//----------------------------------------------------------------------------------
	/// \brief Cube VAO
	//----------------------------------------------------------------------------------
	GLuint m_cubeVAO;
	//----------------------------------------------------------------------------------
	/// \brief Volume shader
	//----------------------------------------------------------------------------------
	Utility::GPUProgram *m_SDFShader;
	//----------------------------------------------------------------------------------
	/// \brief Blend value
	//----------------------------------------------------------------------------------
	float m_blendValue;
	//----------------------------------------------------------------------------------
	/// \brief Parameter values
	//----------------------------------------------------------------------------------
	cml::vector4f m_parameterValues;
	//----------------------------------------------------------------------------------
	/// \brief Speed of rotation
	//----------------------------------------------------------------------------------
	float m_rotationSpeed;
	//----------------------------------------------------------------------------------
	unsigned int m_volATicket, m_volBTicket;
	//----------------------------------------------------------------------------------
	/// \brief Data loader
	//----------------------------------------------------------------------------------
	VolumeLoader *m_dataLoader;
	//----------------------------------------------------------------------------------
	/// \brief Texture volume A
	//----------------------------------------------------------------------------------
	unsigned int m_texVolA;
	//----------------------------------------------------------------------------------
	/// \brief Texture volume B
	//----------------------------------------------------------------------------------
	unsigned int m_texVolB;
	//----------------------------------------------------------------------------------
	/// \brief Object A filename
	//----------------------------------------------------------------------------------
	std::string m_objectAfilename;
	//----------------------------------------------------------------------------------
	/// \brief Object B filename
	//----------------------------------------------------------------------------------
	std::string m_objectBfilename;
	//----------------------------------------------------------------------------------
	/// \brief Loading message drawable
	//----------------------------------------------------------------------------------
	ShivaGUI::Drawable *m_loadingDrawable;
	//----------------------------------------------------------------------------------
	/// \brief Camera
	//----------------------------------------------------------------------------------
	Camera* m_cam;
	//----------------------------------------------------------------------------------
	cml::matrix44f_c m_projectionMatrix;

private :

	bool _load_volume_from_loader(VolumeLoader *, unsigned int glTexID);

	enum constants { number_of_models = 2 };
	cml::vector3f m_boundMin[number_of_models];
	cml::vector3f m_boundMax[number_of_models];

};

#endif
